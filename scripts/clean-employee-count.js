import { createClient } from '@supabase/supabase-js';

console.log('üßπ Limpiando empleados para dejar exactamente 800...');

// Configuraci√≥n de Supabase para PRODUCCI√ìN
const supabaseUrl = 'https://tmqglnycivlcjijoymwe.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRtcWdsbnljaXZsY2ppam95bXdlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDU1NDU0NiwiZXhwIjoyMDc2MTMwNTQ2fQ.1bemvXK8mHpvoA4djXmjtzrtDGFqBY4VBb62QQKuyhw';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function cleanEmployeeCount() {
  try {
    // Contar empleados actuales
    const { count: currentCount, error: countError } = await supabase
      .from('employees')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error('‚ùå Error al contar empleados:', countError);
      return;
    }
    
    console.log(`üìä Empleados actuales: ${currentCount}`);
    
    if (currentCount <= 800) {
      console.log('‚úÖ Ya hay 800 o menos empleados, no es necesario limpiar');
      return;
    }
    
    // Eliminar todos los empleados
    console.log('üóëÔ∏è  Eliminando todos los empleados...');
    const { error: deleteError } = await supabase
      .from('employees')
      .delete()
      .gte('id', '00000000-0000-0000-0000-000000000000'); // Eliminar todos los UUIDs v√°lidos
    
    if (deleteError) {
      console.error('‚ùå Error al eliminar empleados:', deleteError);
      return;
    }
    
    console.log('‚úÖ Empleados eliminados correctamente');
    
    // Obtener empresas
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name');
    
    if (companiesError) {
      console.error('‚ùå Error al obtener empresas:', companiesError);
      return;
    }
    
    // Generar exactamente 800 empleados (50 por empresa)
    console.log('üöÄ Generando exactamente 800 empleados...');
    
    const names = [
      'Camilo', 'Patricio', 'V√≠ctor', 'Graciela', 'Jorge', 'Ricardo', 'Felipe', 'Arturo',
      'Valentina', 'Isabel', 'C√©sar', 'Oscar', 'Carolina', 'Rodrigo', 'Francisco', 'Miguel',
      'Alejandro', 'Daniela', 'Romina', 'Silvana', 'Guillermo', 'Fernanda', 'Claudia', 'Teresa',
      'Cristian', 'Diego', 'Natalia', 'Luis', 'Karina', 'Andr√©s', 'Marcela', 'Ver√≥nica',
      'Roberto', 'Tamara', 'Danielle', 'Macarena', 'Sebasti√°n', 'Pablo', 'Eduardo', 'Mat√≠as',
      'Ignacio', 'Fernando', 'Mart√≠n', 'Benjam√≠n', 'Vicente', 'Joaqu√≠n', 'Diego', 'Tom√°s'
    ];

    const surnames = [
      'Guti√©rrez', 'Castro', 'Vargas', 'Reyes', 'Sep√∫lveda', 'Henr√≠quez', 'Miranda', 'L√≥pez',
      'Pizarro', 'Villarroel', 'Ramos', 'Morales', '√Ålvarez', 'Cort√©s', 'Rivera', 'Parra',
      'Leiva', 'Silva', 'Fuentes', 'Z√∫√±iga', 'D√≠az', 'Mu√±oz', 'Romero', 'Guzm√°n', 'Moraga',
      'Contreras', 'Herrera', 'Roas', 'Aguilera', 'P√©rez', 'S√°nchez', 'Gonz√°lez', 'Rodr√≠guez'
    ];

    const departments = [
      'Operaciones', 'TI', 'Seguridad', 'Producci√≥n', 'RRHH', 'Administraci√≥n',
      'Planificaci√≥n', 'Mantenimiento', 'Servicio al Cliente', 'Log√≠stica',
      'Investigaci√≥n y Desarrollo', 'Contabilidad', 'Finanzas', 'Tesorer√≠a',
      'Marketing', 'Ventas', 'Auditor√≠a', 'Legal', 'Calidad', 'Compras'
    ];

    const positions = [
      'Jefe de Operaciones', 'Desarrollador', 'Supervisor de Seguridad', 'Jefe de Producci√≥n',
      'Reclutador', 'Especialista en Seguridad', 'T√©cnico de Soporte', 'Operario de Producci√≥n',
      'Coordinador Administrativo', 'Planificador', 'Administrativo', 'Gerente de Mantenimiento',
      'Ejecutivo de Servicio', 'Supervisor de Log√≠stica', 'Desarrollador de Producto',
      'Asistente Contable', 'Asistente de Calidad', 'Jefe Administrativo', 'Jefe de Mantenimiento',
      'Coordinador Administrativo', 'Gerente Contable', 'Gerente Financiero', 'Asistente de Mantenimiento',
      'Asistente Financiero', 'Jefe de Calidad', 'Jefe de RRHH', 'Supervisor de Operaciones',
      'Analista de Tesorer√≠a', 'Supervisor de Producci√≥n', 'Especialista en Marketing',
      'Ejecutivo de Ventas', 'Jefe de Tesorer√≠a', 'Contador', 'Asistente de Auditor√≠a',
      'Especialista en Cumplimiento', 'Asistente de Mantenimiento', 'Jefe de Log√≠stica',
      'Coordinador de Marketing', 'Gerente de Auditor√≠a', 'Gerente Legal', 'Gerente de Ventas',
      'Asistente de Tesorer√≠a', 'Auditor Interno'
    ];

    const regions = [
      'Regi√≥n Metropolitana', 'Regi√≥n de Valpara√≠so', 'Regi√≥n del Biob√≠o', 'Regi√≥n de Araucan√≠a',
      'Regi√≥n de Los Lagos', 'Regi√≥n de Antofagasta', 'Regi√≥n de Coquimbo', 'Regi√≥n de Los R√≠os',
      'Regi√≥n del Maule', 'Regi√≥n de Tarapac√°', 'Regi√≥n de Atacama', 'Regi√≥n de √ëuble',
      'Regi√≥n de Ays√©n', 'Regi√≥n de Magallanes', 'Regi√≥n del Libertador O\'Higgins'
    ];

    const workModes = ['Presencial', 'H√≠brido', 'Remoto'];
    const contractTypes = ['Indefinido', 'Plazo Fijo', 'Honorarios'];
    const levels = ['Asistente', 'Especialista', 'Supervisor', 'Coordinador', 'Jefatura', 'Gerente', 'Director', 'Operario'];

    function getRandomElement(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
    }

    function generatePhone() {
      return '+56 9 ' + Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
    }

    const employeesPerCompany = 50;
    let totalCreated = 0;
    
    for (const company of companies) {
      console.log(`üìù Creando ${employeesPerCompany} empleados para ${company.name}...`);
      
      for (let i = 0; i < employeesPerCompany; i++) {
        const name = getRandomElement(names);
        const surname = getRandomElement(surnames);
        const email = `${name.toLowerCase()}${surname.toLowerCase()}${company.id}${i}@company${company.id}.cl`;
        
        const employee = {
          company_id: company.id,
          name: `${name} ${surname}`,
          email: email,
          phone: generatePhone(),
          region: getRandomElement(regions),
          department: getRandomElement(departments),
          level: getRandomElement(levels),
          position: getRandomElement(positions),
          work_mode: getRandomElement(workModes),
          contract_type: getRandomElement(contractTypes),
          is_active: true,
          has_subordinates: Math.random() > 0.7
        };
        
        const { error: insertError } = await supabase
          .from('employees')
          .insert(employee);
        
        if (insertError) {
          console.error(`‚ùå Error al crear empleado ${i + 1}:`, insertError.message);
        } else {
          totalCreated++;
          if (totalCreated % 50 === 0) {
            console.log(`   ‚úÖ Creados ${totalCreated} empleados hasta ahora...`);
          }
        }
      }
    }
    
    // Verificaci√≥n final
    console.log('üîç Verificando resultado final...');
    const { count: finalCount, error: finalCountError } = await supabase
      .from('employees')
      .select('*', { count: 'exact', head: true });
    
    if (finalCountError) {
      console.error('‚ùå Error al verificar conteo final:', finalCountError);
    } else {
      console.log(`üéâ √âXITO: Se crearon ${finalCount} empleados`);
      
      if (finalCount === 800) {
        console.log('‚úÖ Objetivo alcanzado: Exactamente 800 empleados');
        console.log('üéØ El contador de carpetas ahora mostrar√° 800');
      } else {
        console.log(`‚ö†Ô∏è  Se esperaban 800 empleados, pero hay ${finalCount}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

cleanEmployeeCount();