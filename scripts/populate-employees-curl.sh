#!/bin/bash

# Script para poblar 800 empleados usando curl y REST API de Supabase
# Usa SERVICE ROLE KEY para bypass de RLS

echo "üîß Poblando 800 empleados en producci√≥n usando REST API..."

# Variables de configuraci√≥n
SUPABASE_URL="https://hzclkhawjkqgkqjdlzsp.supabase.co"
SERVICE_ROLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6Y2ssaGF3amtxZ2txamRsenNwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDM5MDcxNSwiZXhwIjoyMDQ5OTY2NzE1fQ.3Tm2b8cYvKr6HtO3HlHv0g9qQh0dE7x8k9oFzWqXjY4"

# Primero verificar estado actual
echo "üìä Verificando estado actual de empleados..."
CURRENT_COUNT=$(curl -s -X POST "$SUPABASE_URL/rest/v1/rpc/count_employees" \
  -H "apikey: $SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
  -H "Content-Type: application/json" \
  -d '{}' | jq -r '.[0].count // 0' 2>/dev/null || echo "0")

echo "üìä Empleados actuales: $CURRENT_COUNT"

# Verificar empresas
echo "üè¢ Verificando empresas existentes..."
COMPANIES=$(curl -s -X GET "$SUPABASE_URL/rest/v1/companies?id,name" \
  -H "apikey: $SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
  -H "Accept: application/json" 2>/dev/null)

if [ $? -eq 0 ] && [ "$COMPANIES" != "null" ] && [ "$COMPANIES" != "" ]; then
  echo "‚úÖ Empresas encontradas:"
  echo "$COMPANIES" | jq -r '.[] | "   \(.name) (ID: \(.id))"' 2>/dev/null || echo "   (Error al formatear)"
else
  echo "‚ùå Error al obtener empresas"
  exit 1
fi

# Limpiar empleados existentes
echo "üßπ Limpiando empleados existentes..."
DELETE_RESULT=$(curl -s -X DELETE "$SUPABASE_URL/rest/v1/employees" \
  -H "apikey: $SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
  -H "Prefer: return=minimal" 2>/dev/null)

if [ $? -eq 0 ]; then
  echo "‚úÖ Empleados existentes eliminados"
else
  echo "‚ö†Ô∏è  No se pudieron eliminar empleados existentes"
fi

# Generar y insertar empleados en lotes
echo "üöÄ Generando 800 empleados (50 por empresa)..."

# Obtener IDs de empresas
COMPANY_IDS=$(echo "$COMPANIES" | jq -r '.[].id' 2>/dev/null)

if [ -z "$COMPANY_IDS" ]; then
  echo "‚ùå No se pudieron obtener IDs de empresas"
  exit 1
fi

BATCH_SIZE=50
TOTAL_EMPLOYEES=0

for company_id in $COMPANY_IDS; do
  echo "üìù Creando 50 empleados para empresa ID: $company_id"
  
  # Generar 50 empleados para esta empresa
  for i in $(seq 1 $BATCH_SIZE); do
    # Generar datos aleatorios
    NAMES=("Camilo" "Patricio" "V√≠ctor" "Graciela" "Jorge" "Ricardo" "Felipe" "Arturo" "Valentina" "Isabel" "C√©sar" "Oscar" "Carolina" "Rodrigo" "Francisco" "Miguel" "Alejandro" "Daniela" "Romina" "Silvana" "Guillermo" "Fernanda" "Claudia" "Teresa" "Cristian" "Diego" "Natalia" "Luis" "Karina" "Andr√©s" "Marcela" "Ver√≥nica" "Roberto" "Tamara" "Danielle" "Macarena" "Sebasti√°n" "Pablo" "Eduardo")
    SURNAMES=("Guti√©rrez" "Castro" "Vargas" "Reyes" "Sep√∫lveda" "Henr√≠quez" "Miranda" "L√≥pez" "Pizarro" "Villarroel" "Ramos" "Morales" "√Ålvarez" "Cort√©s" "Rivera" "Parra" "Leiva" "Silva" "Fuentes" "Z√∫√±iga" "D√≠az" "Mu√±oz" "Romero" "Guzm√°n" "Moraga" "Contreras" "Herrera" "Roas" "Aguilera" "P√©rez" "S√°nchez" "Gonz√°lez" "Rodr√≠guez")
    DEPARTMENTS=("Operaciones" "TI" "Seguridad" "Producci√≥n" "RRHH" "Administraci√≥n" "Planificaci√≥n" "Mantenimiento" "Servicio al Cliente" "Log√≠stica" "Investigaci√≥n y Desarrollo" "Contabilidad" "Finanzas" "Tesorer√≠a" "Marketing" "Ventas" "Auditor√≠a" "Legal" "Calidad" "Compras")
    POSITIONS=("Jefe de Operaciones" "Desarrollador" "Supervisor de Seguridad" "Jefe de Producci√≥n" "Reclutador" "Especialista en Seguridad" "T√©cnico de Soporte" "Operario de Producci√≥n" "Coordinador Administrativo" "Planificador" "Administrativo" "Gerente de Mantenimiento" "Ejecutivo de Servicio" "Supervisor de Log√≠stica" "Desarrollador de Producto" "Asistente Contable" "Asistente de Calidad" "Jefe Administrativo" "Jefe de Mantenimiento" "Coordinador Administrativo" "Gerente Contable" "Gerente Financiero" "Asistente de Mantenimiento" "Asistente Financiero" "Jefe de Calidad" "Jefe de RRHH" "Supervisor de Operaciones" "Analista de Tesorer√≠a" "Supervisor de Producci√≥n" "Especialista en Marketing" "Ejecutivo de Ventas" "Jefe de Tesorer√≠a" "Contador" "Asistente de Auditor√≠a" "Especialista en Cumplimiento" "Asistente de Mantenimiento" "Jefe de Log√≠stica" "Coordinador de Marketing" "Gerente de Auditor√≠a" "Gerente Legal" "Gerente de Ventas" "Asistente de Tesorer√≠a" "Auditor Interno")
    REGIONS=("Regi√≥n Metropolitana" "Regi√≥n de Valpara√≠so" "Regi√≥n del Biob√≠o" "Regi√≥n de Araucan√≠a" "Regi√≥n de Los Lagos" "Regi√≥n de Antofagasta" "Regi√≥n de Coquimbo" "Regi√≥n de Los R√≠os" "Regi√≥n del Maule" "Regi√≥n de Tarapac√°" "Regi√≥n de Atacama" "Regi√≥n de √ëuble" "Regi√≥n de Ays√©n" "Regi√≥n de Magallanes" "Regi√≥n del Libertador O'Higgins")
    WORK_MODES=("Presencial" "H√≠brido" "Remoto")
    CONTRACT_TYPES=("Indefinido" "Plazo Fijo" "Honorarios")
    LEVELS=("Asistente" "Especialista" "Supervisor" "Coordinador" "Jefatura" "Gerente" "Director" "Operario")
    
    # Seleccionar aleatoriamente
    NAME=${NAMES[$((RANDOM % ${#NAMES[@]}))]}
    SURNAME=${SURNAMES[$((RANDOM % ${#SURNAMES[@]}))]}
    DEPARTMENT=${DEPARTMENTS[$((RANDOM % ${#DEPARTMENTS[@]}))]}
    POSITION=${POSITIONS[$((RANDOM % ${#POSITIONS[@]}))]}
    REGION=${REGIONS[$((RANDOM % ${#REGIONS[@]}))]}
    WORK_MODE=${WORK_MODES[$((RANDOM % ${#WORK_MODES[@]}))]}
    CONTRACT_TYPE=${CONTRACT_TYPES[$((RANDOM % ${#CONTRACT_TYPES[@]}))]}
    LEVEL=${LEVELS[$((RANDOM % ${#LEVELS[@]}))]}
    
    # Generar email √∫nico
    EMAIL=$(echo "${NAME,,}${SURNAME,,}${company_id}${i}@company${company_id}.cl" | tr -d ' ')
    
    # Generar tel√©fono
    PHONE="+56 9 $(printf "%08d" $((RANDOM % 100000000)))"
    
    # Crear empleado
    EMPLOYEE_DATA=$(cat <<EOF
{
  "company_id": "$company_id",
  "name": "$NAME $SURNAME",
  "email": "$EMAIL",
  "phone": "$PHONE",
  "region": "$REGION",
  "department": "$DEPARTMENT",
  "level": "$LEVEL",
  "position": "$POSITION",
  "work_mode": "$WORK_MODE",
  "contract_type": "$CONTRACT_TYPE",
  "is_active": true,
  "has_subordinates": $((RANDOM % 2))
}
EOF
)
    
    # Insertar empleado
    INSERT_RESULT=$(curl -s -X POST "$SUPABASE_URL/rest/v1/employees" \
      -H "apikey: $SERVICE_ROLE_KEY" \
      -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
      -H "Content-Type: application/json" \
      -H "Prefer: return=minimal" \
      -d "$EMPLOYEE_DATA" 2>/dev/null)
    
    if [ $? -eq 0 ]; then
      TOTAL_EMPLOYEES=$((TOTAL_EMPLOYEES + 1))
      if [ $((TOTAL_EMPLOYEES % 50)) -eq 0 ]; then
        echo "   ‚úÖ Creados $TOTAL_EMPLOYEES empleados hasta ahora..."
      fi
    else
      echo "   ‚ùå Error al crear empleado $i para empresa $company_id"
    fi
  done
done

echo "üéâ Proceso completado!"
echo "üìä Total de empleados creados: $TOTAL_EMPLOYEES"

# Verificaci√≥n final
echo "üîç Verificando resultado final..."
FINAL_COUNT=$(curl -s -X GET "$SUPABASE_URL/rest/v1/employees?select=count" \
  -H "apikey: $SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
  -H "Accept: application/json" \
  -H "Prefer: count=exact" 2>/dev/null | grep -i "content-range" | cut -d'/' -f2 | tr -d ' \r\n')

if [ -z "$FINAL_COUNT" ]; then
  FINAL_COUNT=$(curl -s -X POST "$SUPABASE_URL/rest/v1/rpc/get_employee_count" \
    -H "apikey: $SERVICE_ROLE_KEY" \
    -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
    -H "Content-Type: application/json" \
    -d '{}' | jq -r '.[0].count // 0' 2>/dev/null || echo "desconocido")
fi

echo "üìä Empleados en base de datos: $FINAL_COUNT"

if [ "$FINAL_COUNT" = "800" ] || [ "$TOTAL_EMPLOYEES" -ge 800 ]; then
  echo "‚úÖ √âXITO: Se alcanz√≥ el objetivo de 800 empleados"
  echo "üéØ El contador de carpetas deber√≠a mostrar ahora 800"
else
  echo "‚ö†Ô∏è  Se esperaban 800 empleados, pero se encontraron $FINAL_COUNT"
fi

echo "üèÅ Script finalizado"