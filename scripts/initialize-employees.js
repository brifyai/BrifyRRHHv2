// Script para inicializar empleados (50 por empresa)
import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase (reemplazar con tus valores reales)
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'TU_URL_DE_SUPABASE';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ö†Ô∏è  Por favor configura las variables de entorno:');
  console.error('   REACT_APP_SUPABASE_URL y SUPABASE_SERVICE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Nombres y apellidos comunes en Chile
const firstNames = [
  'Camila', 'Patricio', 'V√≠ctor', 'Graciela', 'Jorge', 'Ricardo', 'Felipe', 'Arturo', 
  'Valentina', 'Isabel', 'C√©sar', 'Oscar', 'Carolina', 'Rodrigo', 'Francisco', 
  'Miguel', 'Alejandro', 'Daniela', 'Romina', 'Silvana', 'Guillermo', 'Fernanda', 
  'Claudia', 'Teresa', 'V√≠ctor', 'Cristian', 'Diego', 'Natalia', 'Luis', 'Karina',
  'Andr√©s', 'Marcela', 'Ver√≥nica', 'Roberto', 'Tamara', 'Danielle', 'Macarena',
  'Sebasti√°n', 'Pablo', 'Eduardo', 'Fernando', 'Constanza', 'Paulina', 'Catalina',
  'Ignacio', 'Renata', 'Mat√≠as', 'Camilo', 'Andrea', 'Nicole', 'Jos√©', 'Manuel'
];

const lastNames = [
  'Guti√©rrez', 'Castro', 'Vargas', 'Reyes', 'Sep√∫lveda', 'Henr√≠quez', 'Miranda',
  'L√≥pez', 'Pizarro', 'Villarroel', 'Ramos', 'Morales', '√Ålvarez', 'Cort√©s',
  'Rivera', 'Parra', 'Leiva', 'Silva', 'Fuentes', 'Z√∫√±iga', 'D√≠az', 'Mu√±oz',
  'Romero', 'Guzm√°n', 'Moraga', 'Contreras', 'Herrera', 'Roas', 'Aguilera',
  'P√©rez', 'S√°nchez', 'Gonz√°lez', 'Rodr√≠guez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez',
  'Garc√≠a', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno'
];

const regions = [
  'Regi√≥n de Tarapac√°', 'Regi√≥n de Antofagasta', 'Regi√≥n de Atacama', 
  'Regi√≥n de Coquimbo', 'Regi√≥n de Valpara√≠so', 
  'Regi√≥n del Libertador General Bernardo O\'Higgins', 'Regi√≥n del Maule', 
  'Regi√≥n de √ëuble', 'Regi√≥n del Biob√≠o', 'Regi√≥n de La Araucan√≠a', 
  'Regi√≥n de Los R√≠os', 'Regi√≥n de Los Lagos', 
  'Regi√≥n Ays√©n del General Carlos Ib√°√±ez del Campo', 
  'Regi√≥n de Magallanes y de la Ant√°rtica Chilena', 'Regi√≥n Metropolitana'
];

const departments = [
  'Operaciones', 'TI', 'Seguridad', 'Producci√≥n', 'RRHH', 'Administraci√≥n',
  'Planificaci√≥n', 'Mantenimiento', 'Servicio al Cliente', 'Log√≠stica',
  'Investigaci√≥n y Desarrollo', 'Contabilidad', 'Finanzas', 'Tesorer√≠a',
  'Marketing', 'Ventas', 'Auditor√≠a', 'Legal', 'Calidad', 'Compras'
];

const levels = [
  'Asistente', 'Especialista', 'Supervisor', 'Coordinador', 
  'Jefatura', 'Gerente', 'Director', 'Operario'
];

const positions = [
  'Jefe de Operaciones', 'Desarrollador', 'Supervisor de Seguridad',
  'Jefe de Producci√≥n', 'Reclutador', 'Especialista en Seguridad',
  'T√©cnico de Soporte', 'Operario de Producci√≥n', 'Coordinador Administrativo',
  'Planificador', 'Administrativo', 'Gerente de Mantenimiento',
  'Ejecutivo de Servicio', 'Supervisor de Log√≠stica', 'Desarrollador de Producto',
  'Asistente Contable', 'Asistente de Calidad', 'Jefe Administrativo',
  'Jefe de Mantenimiento', 'Coordinador Administrativo', 'Gerente Contable',
  'Gerente Financiero', 'Asistente de Mantenimiento', 'Asistente Financiero',
  'Jefe de Calidad', 'Jefe de RRHH', 'Supervisor de Operaciones',
  'Analista de Tesorer√≠a', 'Supervisor de Producci√≥n', 'Especialista en Marketing',
  'Ejecutivo de Ventas', 'Jefe de Tesorer√≠a', 'Contador', 'Asistente de Auditor√≠a',
  'Especialista en Cumplimiento', 'Asistente de Mantenimiento', 'Jefe de Log√≠stica',
  'Coordinador de Marketing', 'Gerente de Auditor√≠a', 'Gerente Legal',
  'Gerente de Ventas', 'Asistente de Tesorer√≠a', 'Auditor Interno'
];

const workModes = ['Presencial', 'H√≠brido', 'Remoto'];
const contractTypes = ['Indefinido', 'Plazo Fijo', 'Honorarios'];

// Generar un nombre aleatorio
function generateRandomName() {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  return `${firstName} ${lastName}`;
}

// Generar un email basado en el nombre y empresa
function generateEmail(name, companyName) {
  const cleanName = name.toLowerCase().replace(/\s+/g, '.');
  const cleanCompany = companyName.toLowerCase().replace(/\s+/g, '');
  return `${cleanName}@${cleanCompany}.cl`;
}

// Generar un tel√©fono aleatorio
function generatePhone() {
  const number = Math.floor(Math.random() * 10000000);
  return `+56 9 ${number.toString().padStart(8, '0')}`;
}

// Generar datos de empleado aleatorios
function generateEmployeeData(companyId, companyName) {
  const name = generateRandomName();
  return {
    company_id: companyId,
    name: name,
    email: generateEmail(name, companyName),
    phone: generatePhone(),
    region: regions[Math.floor(Math.random() * regions.length)],
    department: departments[Math.floor(Math.random() * departments.length)],
    level: levels[Math.floor(Math.random() * levels.length)],
    position: positions[Math.floor(Math.random() * positions.length)],
    work_mode: workModes[Math.floor(Math.random() * workModes.length)],
    contract_type: contractTypes[Math.floor(Math.random() * contractTypes.length)],
    is_active: true,
    has_subordinates: Math.random() > 0.7
  };
}

// Asegurar que cada empresa tenga exactamente 50 empleados
async function ensure50EmployeesPerCompany() {
  try {
    console.log('üöÄ Iniciando proceso para asegurar 50 empleados por empresa...');
    
    // Obtener todas las empresas
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name');
    
    if (companiesError) throw companiesError;
    
    console.log(`üìä Encontradas ${companies.length} empresas`);
    
    // Para cada empresa, asegurar que tenga exactamente 50 empleados
    for (const company of companies) {
      console.log(`\nüè¢ Procesando empresa: ${company.name}`);
      
      // Obtener el conteo actual de empleados
      const { count: currentCount, error: countError } = await supabase
        .from('employees')
        .select('*', { count: 'exact', head: true })
        .eq('company_id', company.id);
      
      if (countError) throw countError;
      
      console.log(`   üìä Empleados actuales: ${currentCount}`);
      
      // Si ya hay 50 empleados, continuar con la siguiente empresa
      if (currentCount === 50) {
        console.log(`   ‚úÖ Empresa ${company.name} ya tiene exactamente 50 empleados`);
        continue;
      }
      
      // Si hay menos de 50, generar los que faltan
      if (currentCount < 50) {
        const employeesToAdd = 50 - currentCount;
        console.log(`   ‚ûï Agregando ${employeesToAdd} empleados a ${company.name}`);
        
        const employeesData = [];
        for (let i = 0; i < employeesToAdd; i++) {
          employeesData.push(generateEmployeeData(company.id, company.name));
        }
        
        // Insertar empleados en lotes
        for (let i = 0; i < employeesData.length; i += 100) {
          const batch = employeesData.slice(i, i + 100);
          const { error: insertError } = await supabase
            .from('employees')
            .insert(batch);
          
          if (insertError) throw insertError;
        }
        
        console.log(`   ‚úÖ Agregados ${employeesToAdd} empleados a ${company.name}`);
      }
      // Si hay m√°s de 50, eliminar los excedentes
      else if (currentCount > 50) {
        const employeesToRemove = currentCount - 50;
        console.log(`   ‚ûñ Eliminando ${employeesToRemove} empleados de ${company.name}`);
        
        // Obtener IDs de empleados para eliminar (aleatoriamente)
        const { data: employeesToDelete, error: selectError } = await supabase
          .from('employees')
          .select('id')
          .eq('company_id', company.id)
          .limit(employeesToRemove);
        
        if (selectError) throw selectError;
        
        const employeeIds = employeesToDelete.map(emp => emp.id);
        
        const { error: deleteError } = await supabase
          .from('employees')
          .delete()
          .in('id', employeeIds);
        
        if (deleteError) throw deleteError;
        
        console.log(`   ‚úÖ Eliminados ${employeesToRemove} empleados de ${company.name}`);
      }
    }
    
    console.log('\nüéâ Proceso completado - todas las empresas tienen 50 empleados');
    
    // Verificar los resultados finales
    console.log('\nüîç Verificando resultados finales:');
    const { data: finalCompanies, error: finalError } = await supabase
      .from('companies')
      .select('id, name');
    
    if (finalError) throw finalError;
    
    for (const company of finalCompanies) {
      const { count: finalCount, error: countError } = await supabase
        .from('employees')
        .select('*', { count: 'exact', head: true })
        .eq('company_id', company.id);
      
      if (countError) throw countError;
      
      console.log(`   ${company.name}: ${finalCount} empleados ${finalCount === 50 ? '‚úÖ' : '‚ùå'}`);
    }
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error asegurando 50 empleados por empresa:', error);
    throw error;
  }
}

// Script para inicializar empleados (50 por empresa)
// Usamos el servicio existente en lugar de crear una nueva conexi√≥n

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Obtener el directorio actual
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Importar el servicio de empleados
const employeeDataService = await import(join(__dirname, '../src/services/employeeDataService.js'));

async function initializeEmployees() {
  try {
    console.log('üöÄ Iniciando proceso para asegurar 50 empleados por empresa...');
    
    // Usar el m√©todo existente del servicio
    const result = await employeeDataService.default.ensure50EmployeesPerCompany();
    
    if (result.success) {
      console.log('\nüéâ ¬°Proceso completado exitosamente!');
      console.log('Todas las empresas ahora tienen exactamente 50 empleados.');
    } else {
      console.log('\n‚ö†Ô∏è  Hubo un problema durante el proceso.');
    }
  } catch (error) {
    console.error('\nüí• Error en el proceso:', error.message);
    console.error('Detalles:', error);
    process.exit(1);
  }
}

// Ejecutar la funci√≥n principal
initializeEmployees();
