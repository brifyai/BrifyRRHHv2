import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cargar variables de entorno
dotenv.config({ path: path.join(__dirname, '../.env') });

console.log('üîß Poblando base de datos de PRODUCCI√ìN con 800 empleados...');
console.log('üìä Base de datos: tmqglnycivlcjijoymwe.supabase.co');

// Configuraci√≥n de Supabase para PRODUCCI√ìN
const supabaseUrl = 'https://tmqglnycivlcjijoymwe.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRtcWdsbnljaXZsY2ppam95bXdlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDU1NDU0NiwiZXhwIjoyMDc2MTMwNTQ2fQ.1bemvXK8mHpvoA4djXmjtzrtDGFqBY4VBb62QQKuyhw';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Datos para generar empleados
const names = [
  'Camilo', 'Patricio', 'V√≠ctor', 'Graciela', 'Jorge', 'Ricardo', 'Felipe', 'Arturo',
  'Valentina', 'Isabel', 'C√©sar', 'Oscar', 'Carolina', 'Rodrigo', 'Francisco', 'Miguel',
  'Alejandro', 'Daniela', 'Romina', 'Silvana', 'Guillermo', 'Fernanda', 'Claudia', 'Teresa',
  'Cristian', 'Diego', 'Natalia', 'Luis', 'Karina', 'Andr√©s', 'Marcela', 'Ver√≥nica',
  'Roberto', 'Tamara', 'Danielle', 'Macarena', 'Sebasti√°n', 'Pablo', 'Eduardo', 'Mat√≠as',
  'Ignacio', 'Fernando', 'Mart√≠n', 'Benjam√≠n', 'Vicente', 'Joaqu√≠n', 'Diego', 'Tom√°s'
];

const surnames = [
  'Guti√©rrez', 'Castro', 'Vargas', 'Reyes', 'Sep√∫lveda', 'Henr√≠quez', 'Miranda', 'L√≥pez',
  'Pizarro', 'Villarroel', 'Ramos', 'Morales', '√Ålvarez', 'Cort√©s', 'Rivera', 'Parra',
  'Leiva', 'Silva', 'Fuentes', 'Z√∫√±iga', 'D√≠az', 'Mu√±oz', 'Romero', 'Guzm√°n', 'Moraga',
  'Contreras', 'Herrera', 'Roas', 'Aguilera', 'P√©rez', 'S√°nchez', 'Gonz√°lez', 'Rodr√≠guez'
];

const departments = [
  'Operaciones', 'TI', 'Seguridad', 'Producci√≥n', 'RRHH', 'Administraci√≥n',
  'Planificaci√≥n', 'Mantenimiento', 'Servicio al Cliente', 'Log√≠stica',
  'Investigaci√≥n y Desarrollo', 'Contabilidad', 'Finanzas', 'Tesorer√≠a',
  'Marketing', 'Ventas', 'Auditor√≠a', 'Legal', 'Calidad', 'Compras'
];

const positions = [
  'Jefe de Operaciones', 'Desarrollador', 'Supervisor de Seguridad', 'Jefe de Producci√≥n',
  'Reclutador', 'Especialista en Seguridad', 'T√©cnico de Soporte', 'Operario de Producci√≥n',
  'Coordinador Administrativo', 'Planificador', 'Administrativo', 'Gerente de Mantenimiento',
  'Ejecutivo de Servicio', 'Supervisor de Log√≠stica', 'Desarrollador de Producto',
  'Asistente Contable', 'Asistente de Calidad', 'Jefe Administrativo', 'Jefe de Mantenimiento',
  'Coordinador Administrativo', 'Gerente Contable', 'Gerente Financiero', 'Asistente de Mantenimiento',
  'Asistente Financiero', 'Jefe de Calidad', 'Jefe de RRHH', 'Supervisor de Operaciones',
  'Analista de Tesorer√≠a', 'Supervisor de Producci√≥n', 'Especialista en Marketing',
  'Ejecutivo de Ventas', 'Jefe de Tesorer√≠a', 'Contador', 'Asistente de Auditor√≠a',
  'Especialista en Cumplimiento', 'Asistente de Mantenimiento', 'Jefe de Log√≠stica',
  'Coordinador de Marketing', 'Gerente de Auditor√≠a', 'Gerente Legal', 'Gerente de Ventas',
  'Asistente de Tesorer√≠a', 'Auditor Interno'
];

const regions = [
  'Regi√≥n Metropolitana', 'Regi√≥n de Valpara√≠so', 'Regi√≥n del Biob√≠o', 'Regi√≥n de Araucan√≠a',
  'Regi√≥n de Los Lagos', 'Regi√≥n de Antofagasta', 'Regi√≥n de Coquimbo', 'Regi√≥n de Los R√≠os',
  'Regi√≥n del Maule', 'Regi√≥n de Tarapac√°', 'Regi√≥n de Atacama', 'Regi√≥n de √ëuble',
  'Regi√≥n de Ays√©n', 'Regi√≥n de Magallanes', 'Regi√≥n del Libertador O\'Higgins'
];

const workModes = ['Presencial', 'H√≠brido', 'Remoto'];
const contractTypes = ['Indefinido', 'Plazo Fijo', 'Honorarios'];
const levels = ['Asistente', 'Especialista', 'Supervisor', 'Coordinador', 'Jefatura', 'Gerente', 'Director', 'Operario'];

function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

function generatePhone() {
  return '+56 9 ' + Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
}

async function populateProductionDatabase() {
  try {
    console.log('üìä Verificando estado actual de la base de datos de producci√≥n...');
    
    // Obtener conteo actual
    const { count: currentCount, error: countError } = await supabase
      .from('employees')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error('‚ùå Error al contar empleados:', countError);
      return;
    }
    
    console.log(`üìä Empleados actuales en producci√≥n: ${currentCount || 0}`);
    
    // Obtener empresas
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name');
    
    if (companiesError) {
      console.error('‚ùå Error al obtener empresas:', companiesError);
      return;
    }
    
    console.log(`üè¢ Empresas encontradas en producci√≥n: ${companies.length}`);
    companies.forEach((company, index) => {
      console.log(`   ${index + 1}. ${company.name} (ID: ${company.id})`);
    });
    
    if (companies.length === 0) {
      console.error('‚ùå No hay empresas en la base de datos de producci√≥n');
      return;
    }
    
    // Limpiar empleados existentes
    if (currentCount > 0) {
      console.log('üßπ Limpiando empleados existentes en producci√≥n...');
      const { error: deleteError } = await supabase
        .from('employees')
        .delete()
        .neq('id', 0); // Eliminar todos
      
      if (deleteError) {
        console.error('‚ùå Error al limpiar empleados:', deleteError);
      } else {
        console.log('‚úÖ Empleados existentes eliminados');
      }
    }
    
    // Generar empleados
    console.log('üöÄ Generando 800 empleados en producci√≥n...');
    const employeesPerCompany = Math.floor(800 / companies.length);
    let totalCreated = 0;
    
    for (const company of companies) {
      console.log(`üìù Creando ${employeesPerCompany} empleados para ${company.name}...`);
      
      for (let i = 0; i < employeesPerCompany; i++) {
        const name = getRandomElement(names);
        const surname = getRandomElement(surnames);
        const email = `${name.toLowerCase()}${surname.toLowerCase()}${company.id}${i}@company${company.id}.cl`;
        
        const employee = {
          company_id: company.id,
          name: `${name} ${surname}`,
          email: email,
          phone: generatePhone(),
          region: getRandomElement(regions),
          department: getRandomElement(departments),
          level: getRandomElement(levels),
          position: getRandomElement(positions),
          work_mode: getRandomElement(workModes),
          contract_type: getRandomElement(contractTypes),
          is_active: true,
          has_subordinates: Math.random() > 0.7
        };
        
        const { error: insertError } = await supabase
          .from('employees')
          .insert(employee);
        
        if (insertError) {
          console.error(`‚ùå Error al crear empleado ${i + 1}:`, insertError.message);
        } else {
          totalCreated++;
          if (totalCreated % 50 === 0) {
            console.log(`   ‚úÖ Creados ${totalCreated} empleados hasta ahora...`);
          }
        }
      }
    }
    
    // Verificaci√≥n final
    console.log('üîç Verificando resultado final en producci√≥n...');
    const { count: finalCount, error: finalCountError } = await supabase
      .from('employees')
      .select('*', { count: 'exact', head: true });
    
    if (finalCountError) {
      console.error('‚ùå Error al verificar conteo final:', finalCountError);
    } else {
      console.log(`üéâ √âXITO: Se crearon ${finalCount} empleados en producci√≥n`);
      
      if (finalCount >= 800) {
        console.log('‚úÖ Objetivo alcanzado: 800+ empleados creados');
        console.log('üéØ El contador de carpetas en producci√≥n ahora mostrar√° 800');
      } else {
        console.log(`‚ö†Ô∏è  Se esperaban 800 empleados, pero se crearon ${finalCount}`);
      }
    }
    
    // Mostrar muestra de empleados
    const { data: sample, error: sampleError } = await supabase
      .from('employees')
      .select('name, email, department, position')
      .limit(5);
    
    if (!sampleError && sample) {
      console.log('\nüìã Muestra de empleados creados en producci√≥n:');
      sample.forEach((emp, index) => {
        console.log(`   ${index + 1}. ${emp.name} - ${emp.email}`);
        console.log(`      Depto: ${emp.department} | Cargo: ${emp.position}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
    console.error('Stack:', error.stack);
  }
}

populateProductionDatabase();