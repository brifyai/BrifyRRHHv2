#!/usr/bin/env node

/**
 * Script para poblar la base de datos con 800 empleados usando permisos de administrador
 * Este script usa el service role key para bypass RLS policies
 */

const { createClient } = require('@supabase/supabase-js');

// Colores para consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

// Configuraci√≥n de Supabase con SERVICE ROLE KEY (permisos de administrador)
const supabaseUrl = 'https://tmqglnycivlcjijoymwe.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRtcWdsbnljaXZsY2ppam95bXdlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDU1NDU0NiwiZXhwIjoyMDc2MTMwNTQ2fQ.1bemvXK8mHpvoA4djXmjtzrtDGFqBY4VBb62QQKuyhw';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Datos para generaci√≥n
const firstNames = [
  'Camila', 'Patricio', 'V√≠ctor', 'Graciela', 'Jorge', 'Ricardo', 'Felipe', 'Arturo', 
  'Valentina', 'Isabel', 'C√©sar', 'Oscar', 'Carolina', 'Rodrigo', 'Francisco', 
  'Miguel', 'Alejandro', 'Daniela', 'Romina', 'Silvana', 'Guillermo', 'Fernanda', 
  'Claudia', 'Teresa', 'V√≠ctor', 'Cristian', 'Diego', 'Natalia', 'Luis', 'Karina',
  'Andr√©s', 'Marcela', 'Ver√≥nica', 'Roberto', 'Tamara', 'Danielle', 'Macarena',
  'Sebasti√°n', 'Pablo', 'Eduardo', 'Fernando', 'Constanza', 'Paulina', 'Catalina',
  'Ignacio', 'Renata', 'Mat√≠as', 'Camilo', 'Andrea', 'Nicole', 'Jos√©', 'Manuel',
  'Mar√≠a Jos√©', 'Francisca', 'Javiera', 'Constanza', 'Sof√≠a', 'Isidora', 'Martina',
  'Benjam√≠n', 'Vicente', 'Mat√≠as', 'Sebasti√°n', 'Joaqu√≠n', 'Diego', 'Tom√°s', 'Agust√≠n'
];

const lastNames = [
  'Guti√©rrez', 'Castro', 'Vargas', 'Reyes', 'Sep√∫lveda', 'Henr√≠quez', 'Miranda',
  'L√≥pez', 'Pizarro', 'Villarroel', 'Ramos', 'Morales', '√Ålvarez', 'Cort√©s',
  'Rivera', 'Parra', 'Leiva', 'Silva', 'Fuentes', 'Z√∫√±iga', 'D√≠az', 'Mu√±oz',
  'Romero', 'Guzm√°n', 'Moraga', 'Contreras', 'Herrera', 'Roas', 'Aguilera',
  'P√©rez', 'S√°nchez', 'Gonz√°lez', 'Rodr√≠guez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez',
  'Garc√≠a', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno',
  'Torres', 'Bravo', 'Silva', 'Valenzuela', 'Castillo', 'Espinoza', 'Soto',
  'Vald√©s', 'Fuentes', 'Toro', 'Leiva', 'Araya', 'Rojas', 'Paredes'
];

const regions = [
  'Regi√≥n Metropolitana', 'Regi√≥n de Valpara√≠so', 'Regi√≥n del Biob√≠o', 'Regi√≥n de Araucan√≠a',
  'Regi√≥n de Los Lagos', 'Regi√≥n de Antofagasta', 'Regi√≥n de Coquimbo', 'Regi√≥n de Los R√≠os',
  'Regi√≥n del Maule', 'Regi√≥n de Tarapac√°', 'Regi√≥n de Atacama', 'Regi√≥n de √ëuble',
  'Regi√≥n de Ays√©n', 'Regi√≥n de Magallanes', 'Regi√≥n del Libertador O\'Higgins'
];

const departments = [
  'Operaciones', 'TI', 'Seguridad', 'Producci√≥n', 'RRHH', 'Administraci√≥n',
  'Planificaci√≥n', 'Mantenimiento', 'Servicio al Cliente', 'Log√≠stica',
  'Investigaci√≥n y Desarrollo', 'Contabilidad', 'Finanzas', 'Tesorer√≠a',
  'Marketing', 'Ventas', 'Auditor√≠a', 'Legal', 'Calidad', 'Compras'
];

const levels = [
  'Asistente', 'Especialista', 'Supervisor', 'Coordinador', 
  'Jefatura', 'Gerente', 'Director', 'Operario'
];

const positions = [
  'Jefe de Operaciones', 'Desarrollador', 'Supervisor de Seguridad',
  'Jefe de Producci√≥n', 'Reclutador', 'Especialista en Seguridad',
  'T√©cnico de Soporte', 'Operario de Producci√≥n', 'Coordinador Administrativo',
  'Planificador', 'Administrativo', 'Gerente de Mantenimiento',
  'Ejecutivo de Servicio', 'Supervisor de Log√≠stica', 'Desarrollador de Producto',
  'Asistente Contable', 'Asistente de Calidad', 'Jefe Administrativo',
  'Jefe de Mantenimiento', 'Coordinador Administrativo', 'Gerente Contable',
  'Gerente Financiero', 'Asistente de Mantenimiento', 'Asistente Financiero',
  'Jefe de Calidad', 'Jefe de RRHH', 'Supervisor de Operaciones',
  'Analista de Tesorer√≠a', 'Supervisor de Producci√≥n', 'Especialista en Marketing',
  'Ejecutivo de Ventas', 'Jefe de Tesorer√≠a', 'Contador', 'Asistente de Auditor√≠a',
  'Especialista en Cumplimiento', 'Asistente de Mantenimiento', 'Jefe de Log√≠stica',
  'Coordinador de Marketing', 'Gerente de Auditor√≠a', 'Gerente Legal',
  'Gerente de Ventas', 'Asistente de Tesorer√≠a', 'Auditor Interno'
];

const workModes = ['Presencial', 'H√≠brido', 'Remoto'];
const contractTypes = ['Indefinido', 'Plazo Fijo', 'Honorarios'];

// Funci√≥n para obtener elemento aleatorio
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// Funci√≥n para generar tel√©fono chileno
function generateChileanPhone() {
  return '+56 9 ' + Math.floor(Math.random() * 10000000).toString().padStart(8, '0');
}

// Funci√≥n para generar email
function generateEmail(name, companyName) {
  const nameParts = name.toLowerCase().split(' ');
  const companyDomain = companyName.toLowerCase().replace(/\s+/g, '').replace(/[^a-z0-9]/g, '');
  return `${nameParts[0]}.${nameParts[1]}@${companyDomain}.cl`;
}

// Obtener empresas existentes
async function getCompanies() {
  try {
    const { data, error } = await supabase
      .from('companies')
      .select('id, name');
    
    if (error) {
      logError(`Error al obtener empresas: ${error.message}`);
      return [];
    }
    
    logSuccess(`Se encontraron ${data.length} empresas`);
    return data;
  } catch (error) {
    logError(`Error al obtener empresas: ${error.message}`);
    return [];
  }
}

// Limpiar empleados existentes
async function clearExistingEmployees() {
  try {
    logInfo('Limpiando empleados existentes...');
    
    const { error } = await supabase
      .from('employees')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
    
    if (error) {
      logError(`Error al limpiar empleados: ${error.message}`);
      return false;
    }
    
    logSuccess('Empleados existentes eliminados');
    return true;
  } catch (error) {
    logError(`Error al limpiar empleados: ${error.message}`);
    return false;
  }
}

// Generar empleados
async function generateEmployees() {
  log('üöÄ Generando 800 empleados con permisos de administrador', 'bright');
  log('‚ïê'.repeat(60), 'blue');
  
  const companies = await getCompanies();
  
  if (companies.length === 0) {
    logError('No se encontraron empresas. No se pueden generar empleados.');
    return false;
  }
  
  // Limpiar datos existentes
  const cleared = await clearExistingEmployees();
  if (!cleared) {
    logWarning('No se pudieron limpiar los empleados existentes, continuando...');
  }
  
  const employeesPerCompany = Math.floor(800 / companies.length);
  const remainingEmployees = 800 % companies.length;
  
  logInfo(`Se generar√°n ${employeesPerCompany} empleados por empresa`);
  logInfo(`${remainingEmployees} empresas adicionales recibir√°n 1 empleado extra`);
  
  let totalGenerated = 0;
  let batch = [];
  const batchSize = 100; // Lotes m√°s grandes con permisos de admin
  
  for (let i = 0; i < companies.length; i++) {
    const company = companies[i];
    const employeesForThisCompany = employeesPerCompany + (i < remainingEmployees ? 1 : 0);
    
    logInfo(`\nüìÅ Generando ${employeesForThisCompany} empleados para: ${company.name}`);
    
    for (let j = 0; j < employeesForThisCompany; j++) {
      const firstName = getRandomElement(firstNames);
      const lastName = getRandomElement(lastNames);
      const fullName = `${firstName} ${lastName}`;
      
      const employee = {
        company_id: company.id,
        name: fullName,
        email: generateEmail(fullName, company.name),
        phone: generateChileanPhone(),
        region: getRandomElement(regions),
        department: getRandomElement(departments),
        level: getRandomElement(levels),
        position: getRandomElement(positions),
        work_mode: getRandomElement(workModes),
        contract_type: getRandomElement(contractTypes),
        is_active: true,
        has_subordinates: Math.random() > 0.7, // 30% de probabilidad de tener subordinados
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      batch.push(employee);
      
      // Insertar en lotes
      if (batch.length >= batchSize) {
        const inserted = await insertBatch(batch);
        if (inserted) {
          totalGenerated += batch.length;
          logInfo(`  ‚úÖ Progreso: ${totalGenerated}/800 empleados generados`);
        } else {
          logError(`  ‚ùå Error al insertar lote de ${batch.length} empleados`);
        }
        batch = [];
      }
    }
  }
  
  // Insertar el √∫ltimo lote si hay elementos restantes
  if (batch.length > 0) {
    const inserted = await insertBatch(batch);
    if (inserted) {
      totalGenerated += batch.length;
      logInfo(`  ‚úÖ Lote final: ${batch.length} empleados insertados`);
    }
  }
  
  logSuccess(`\nüéâ Total de empleados generados: ${totalGenerated}`);
  return totalGenerated === 800;
}

// Insertar lote en la base de datos
async function insertBatch(employees) {
  try {
    const { data, error } = await supabase
      .from('employees')
      .insert(employees)
      .select();
    
    if (error) {
      logError(`Error al insertar lote: ${error.message}`);
      return false;
    }
    
    return true;
  } catch (error) {
    logError(`Error al insertar lote: ${error.message}`);
    return false;
  }
}

// Verificar resultado
async function verifyResult() {
  log('\nüîç Verificando resultado...', 'cyan');
  
  try {
    const { count, error } = await supabase
      .from('employees')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      logError(`Error al verificar: ${error.message}`);
      return false;
    }
    
    if (count === 800) {
      logSuccess(`‚úÖ Verificaci√≥n exitosa: ${count} empleados en la base de datos`);
      
      // Obtener muestra de empleados
      const { data: sampleData } = await supabase
        .from('employees')
        .select('name, email, company_id, department')
        .limit(5);
      
      if (sampleData && sampleData.length > 0) {
        logInfo('Muestra de empleados generados:');
        sampleData.forEach((emp, index) => {
          logInfo(`  ${index + 1}. ${emp.name} - ${emp.department} - ${emp.email}`);
        });
      }
      
      return true;
    } else {
      logWarning(`‚ö†Ô∏è  Se esperaban 800 empleados, se encontraron ${count}`);
      return false;
    }
  } catch (error) {
    logError(`Error al verificar: ${error.message}`);
    return false;
  }
}

// Funci√≥n principal
async function main() {
  log('üìä SCRIPT DE POBLACI√ìN DE EMPLEADOS (ADMIN) - BrifyRRHH', 'bright');
  log('Este script generar√° 800 empleados usando permisos de administrador', 'blue');
  log('‚ïê'.repeat(60), 'blue');
  
  try {
    // Verificar conexi√≥n con service role
    logInfo('Verificando conexi√≥n con permisos de administrador...');
    const { data, error } = await supabase
      .from('companies')
      .select('count')
      .limit(1);
    
    if (error) {
      logError(`Error de conexi√≥n: ${error.message}`);
      process.exit(1);
    }
    
    logSuccess('Conexi√≥n establecida con permisos de administrador');
    
    // Generar empleados
    const success = await generateEmployees();
    
    if (success) {
      // Verificar resultado
      const verificationSuccess = await verifyResult();
      
      if (verificationSuccess) {
        log('\nüéâ ¬°PROCESO COMPLETADO CON √âXITO!', 'green');
        log('‚úÖ 800 empleados han sido generados correctamente', 'green');
        log('‚úÖ El contador de carpetas ahora deber√≠a mostrar 800', 'green');
        log('‚úÖ La aplicaci√≥n est√° lista para producci√≥n', 'green');
        
        log('\nüìù PR√ìXIMOS PASOS:', 'bright');
        log('1. Verifica https://brifyrrhhapp.netlify.app/panel-principal', 'blue');
        log('2. El contador de carpetas deber√≠a mostrar 800', 'blue');
        log('3. Prueba la funcionalidad completa', 'blue');
        log('4. Verifica que todos los usuarios vean el contador correcto', 'blue');
        
        log('\nüîÑ Los cambios deber√≠an reflejarse inmediatamente en producci√≥n', 'cyan');
      } else {
        log('\n‚ö†Ô∏è  El proceso complet√≥ pero la verificaci√≥n fall√≥', 'yellow');
      }
    } else {
      log('\n‚ùå ERROR: No se pudieron generar todos los empleados', 'red');
      process.exit(1);
    }
    
  } catch (error) {
    logError(`Error durante la ejecuci√≥n: ${error.message}`);
    process.exit(1);
  }
}

// Ejecutar script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  generateEmployees,
  verifyResult,
  getCompanies,
  clearExistingEmployees
};