// Script para probar la sincronizaci√≥n de empresas
import { createClient } from '@supabase/supabase-js';

// Crear cliente de Supabase
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_ANON_KEY
);

// Importar el servicio de sincronizaci√≥n
import companySyncService from './src/services/companySyncService.js';

async function testCompanySync() {
  console.log('üß™ Iniciando prueba de sincronizaci√≥n de empresas...');
  
  try {
    // 1. Obtener empresas actuales
    console.log('\nüìã Obteniendo empresas actuales...');
    const initialCompanies = await companySyncService.getCompanies();
    console.log(`Empresas iniciales: ${initialCompanies.length}`);
    initialCompanies.forEach(company => {
      console.log(`  - ${company.name} (${company.employee_count} empleados)`);
    });
    
    // 2. Obtener estad√≠sticas iniciales
    console.log('\nüìä Obteniendo estad√≠sticas iniciales...');
    const initialStats = await companySyncService.getCompanyStats();
    console.log('Estad√≠sticas iniciales:', initialStats);
    
    // 3. Crear una empresa de prueba (creando un empleado)
    console.log('\n‚ûï Creando empresa de prueba...');
    const testCompanyName = `Empresa Test ${Date.now()}`;
    
    const { data: createdEmployee, error: createError } = await companySyncService.createCompany({
      name: testCompanyName,
      activo: true
    });
    
    if (createError) {
      console.error('‚ùå Error creando empresa:', createError);
      return;
    }
    
    console.log(`‚úÖ Empresa creada: ${testCompanyName}`);
    
    // 4. Esperar un momento para que la sincronizaci√≥n se propague
    console.log('\n‚è≥ Esperando propagaci√≥n de cambios...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 5. Verificar que la empresa aparece en el servicio
    console.log('\nüîÑ Verificando sincronizaci√≥n...');
    const updatedCompanies = await companySyncService.getCompanies();
    console.log(`Empresas despu√©s de creaci√≥n: ${updatedCompanies.length}`);
    
    const foundCompany = updatedCompanies.find(c => c.name === testCompanyName);
    if (foundCompany) {
      console.log(`‚úÖ Empresa sincronizada correctamente: ${foundCompany.name} (${foundCompany.employee_count} empleados)`);
    } else {
      console.log('‚ùå La empresa no aparece en la lista sincronizada');
    }
    
    // 6. Actualizar la empresa
    console.log('\n‚úèÔ∏è Actualizando empresa...');
    const updatedName = `Empresa Actualizada ${Date.now()}`;
    const { data: updatedCompany, error: updateError } = await companySyncService.updateCompany(
      testCompanyName,
      { name: updatedName, activo: false }
    );
    
    if (updateError) {
      console.error('‚ùå Error actualizando empresa:', updateError);
    } else {
      console.log(`‚úÖ Empresa actualizada: ${updatedName}`);
    }
    
    // 7. Esperar y verificar actualizaci√≥n
    await new Promise(resolve => setTimeout(resolve, 2000));
    const companiesAfterUpdate = await companySyncService.getCompanies();
    const foundUpdatedCompany = companiesAfterUpdate.find(c => c.name === updatedName);
    
    if (foundUpdatedCompany) {
      console.log(`‚úÖ Actualizaci√≥n sincronizada correctamente: ${foundUpdatedCompany.name} (activo: ${foundUpdatedCompany.activo})`);
    } else {
      console.log('‚ùå La actualizaci√≥n no se sincroniz√≥ correctamente');
    }
    
    // 8. Eliminar la empresa
    console.log('\nüóëÔ∏è Eliminando empresa...');
    const { error: deleteError } = await companySyncService.deleteCompany(updatedName);
    
    if (deleteError) {
      console.error('‚ùå Error eliminando empresa:', deleteError);
    } else {
      console.log('‚úÖ Empresa eliminada');
    }
    
    // 9. Verificar eliminaci√≥n
    await new Promise(resolve => setTimeout(resolve, 2000));
    const finalCompanies = await companySyncService.getCompanies();
    const deletedCompanyStillExists = finalCompanies.find(c => c.name === updatedName);
    
    if (!deletedCompanyStillExists) {
      console.log('‚úÖ Eliminaci√≥n sincronizada correctamente');
    } else {
      console.log('‚ùå La eliminaci√≥n no se sincroniz√≥ correctamente');
    }
    
    // 10. Obtener estad√≠sticas finales
    console.log('\nüìä Obteniendo estad√≠sticas finales...');
    const finalStats = await companySyncService.getCompanyStats();
    console.log('Estad√≠sticas finales:', finalStats);
    
    // 11. Probar suscripci√≥n a eventos
    console.log('\nüì° Probando suscripci√≥n a eventos...');
    let eventReceived = false;
    
    const subscriptionId = companySyncService.subscribe('companyCreated', (data) => {
      console.log('üì° Evento companyCreated recibido:', data);
      eventReceived = true;
    });
    
    console.log(`‚úÖ Suscripci√≥n creada con ID: ${subscriptionId}`);
    
    // Crear otra empresa para probar el evento
    const testEventCompany = `Empresa Evento ${Date.now()}`;
    await companySyncService.createCompany({
      name: testEventCompany,
      activo: true
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (eventReceived) {
      console.log('‚úÖ Evento recibido correctamente');
    } else {
      console.log('‚ö†Ô∏è No se recibi√≥ el evento (puede ser normal en Node.js)');
    }
    
    // Cancelar suscripci√≥n
    companySyncService.unsubscribe('companyCreated', subscriptionId);
    console.log('‚úÖ Suscripci√≥n cancelada');
    
    // Limpiar empresa de evento
    await companySyncService.deleteCompany(testEventCompany);
    
    // 12. Obtener estado del servicio
    console.log('\nüìä Estado final del servicio:');
    const serviceStatus = companySyncService.getStatus();
    console.log(serviceStatus);
    
    console.log('\nüéâ Prueba de sincronizaci√≥n completada exitosamente');
    console.log(`Empresas finales: ${finalCompanies.length}`);
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Ejecutar la prueba
testCompanySync();