-- ========================================
-- CREAR TABLA DE CONFIGURACI√ìN DE WHATSAPP
-- ========================================
-- Esta tabla permite que cada empresa tenga su propia configuraci√≥n de WhatsApp
-- Ideal para agencias que gestionan m√∫ltiples clientes

-- Crear tabla de configuraciones de WhatsApp
CREATE TABLE IF NOT EXISTS whatsapp_configs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
  
  -- Credenciales de Meta WhatsApp Business API
  access_token TEXT NOT NULL,
  phone_number_id TEXT NOT NULL,
  webhook_verify_token TEXT,
  
  -- Informaci√≥n del n√∫mero de WhatsApp
  display_phone_number TEXT,
  verified_name TEXT,
  quality_rating TEXT,
  
  -- Configuraci√≥n y estado
  is_active BOOLEAN DEFAULT true,
  test_mode BOOLEAN DEFAULT false,
  is_default BOOLEAN DEFAULT false, -- Para agencias: n√∫mero por defecto
  
  -- M√©tricas y l√≠mites
  daily_limit INTEGER DEFAULT 1000,
  monthly_limit INTEGER DEFAULT 30000,
  current_daily_usage INTEGER DEFAULT 0,
  current_monthly_usage INTEGER DEFAULT 0,
  
  -- Control de rate limiting
  last_message_at TIMESTAMP WITH TIME ZONE,
  message_cooldown_seconds INTEGER DEFAULT 1,
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES users(id),
  
  -- Constraints
  CONSTRAINT whatsapp_configs_unique_company UNIQUE (company_id),
  CONSTRAINT whatsapp_configs_check_limits CHECK (daily_limit > 0 AND monthly_limit > 0),
  CONSTRAINT whatsapp_configs_check_usage CHECK (current_daily_usage >= 0 AND current_monthly_usage >= 0)
);

-- Crear √≠ndices para mejor rendimiento
CREATE INDEX IF NOT EXISTS idx_whatsapp_configs_company_id ON whatsapp_configs(company_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_configs_is_active ON whatsapp_configs(is_active);
CREATE INDEX IF NOT EXISTS idx_whatsapp_configs_is_default ON whatsapp_configs(is_default);

-- ========================================
-- ACTUALIZAR TABLA DE EMPRESAS
-- ========================================
-- Agregar campos de WhatsApp a la tabla de companies para compatibilidad
ALTER TABLE companies 
ADD COLUMN IF NOT EXISTS whatsapp_phone_number TEXT,
ADD COLUMN IF NOT EXISTS whatsapp_configured BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS whatsapp_business_name TEXT,
ADD COLUMN IF NOT EXISTS whatsapp_status TEXT DEFAULT 'disconnected';

-- ========================================
-- CREAR TABLA DE PLANTILLAS DE WHATSAPP POR EMPRESA
-- ========================================
CREATE TABLE IF NOT EXISTS whatsapp_templates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
  whatsapp_config_id BIGINT REFERENCES whatsapp_configs(id) ON DELETE CASCADE,
  
  -- Informaci√≥n de la plantilla
  template_name TEXT NOT NULL,
  template_category TEXT NOT NULL,
  template_language TEXT DEFAULT 'es',
  template_status TEXT DEFAULT 'pending', -- pending, approved, rejected
  
  -- Estructura de la plantilla (JSON)
  components JSONB,
  
  -- Metadata
  template_id TEXT, -- ID de la plantilla en Meta
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints
  CONSTRAINT whatsapp_templates_unique_name UNIQUE (company_id, template_name)
);

-- Crear √≠ndices para plantillas
CREATE INDEX IF NOT EXISTS idx_whatsapp_templates_company_id ON whatsapp_templates(company_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_templates_status ON whatsapp_templates(template_status);

-- ========================================
-- CREAR TABLA DE LOGS DE WHATSAPP
-- ========================================
CREATE TABLE IF NOT EXISTS whatsapp_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
  whatsapp_config_id BIGINT REFERENCES whatsapp_configs(id) ON DELETE CASCADE,
  
  -- Informaci√≥n del mensaje
  message_id TEXT, -- ID del mensaje en WhatsApp
  recipient_phone TEXT NOT NULL,
  recipient_id BIGINT REFERENCES employees(id),
  message_content TEXT,
  message_type TEXT DEFAULT 'text', -- text, template, media
  
  -- Estado y entrega
  status TEXT DEFAULT 'sent', -- sent, delivered, read, failed
  error_message TEXT,
  
  -- Costos y m√©tricas
  cost DECIMAL(10, 4) DEFAULT 0.0525, -- Costo por mensaje
  webhook_received_at TIMESTAMP WITH TIME ZONE,
  
  -- Metadata
  sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES users(id)
);

-- Crear √≠ndices para logs
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_company_id ON whatsapp_logs(company_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_status ON whatsapp_logs(status);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_sent_at ON whatsapp_logs(sent_at);

-- ========================================
-- CREAR FUNCI√ìN PARA RESEAR USO DIARIO
-- ========================================
CREATE OR REPLACE FUNCTION reset_daily_whatsapp_usage()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE whatsapp_configs 
  SET current_daily_usage = 0, 
      updated_at = NOW()
  WHERE DATE(updated_at) < DATE(NOW());
  
  -- Resetear uso mensual el primer d√≠a de cada mes
  IF DATE_PART('day', NOW()) = 1 THEN
    UPDATE whatsapp_configs 
    SET current_monthly_usage = 0,
        updated_at = NOW();
  END IF;
  
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- ========================================
-- CREAR TRIGGER PARA RESEAR USO DIARIO
-- ========================================
CREATE TRIGGER trigger_reset_daily_whatsapp_usage
AFTER INSERT ON whatsapp_logs
FOR EACH STATEMENT
EXECUTE FUNCTION reset_daily_whatsapp_usage();

-- ========================================
-- VISTA PARA CONFIGURACIONES ACTIVAS
-- ========================================
CREATE OR REPLACE VIEW active_whatsapp_configs AS
SELECT 
  wc.*,
  c.name as company_name,
  c.industry as company_industry,
  CASE 
    WHEN wc.is_default THEN 'üåü Por defecto'
    WHEN wc.is_active THEN '‚úÖ Activo'
    ELSE '‚ùå Inactivo'
  END as status_display,
  ROUND((wc.current_daily_usage::decimal / wc.daily_limit) * 100, 2) as daily_usage_percentage,
  ROUND((wc.current_monthly_usage::decimal / wc.monthly_limit) * 100, 2) as monthly_usage_percentage
FROM whatsapp_configs wc
JOIN companies c ON wc.company_id = c.id
WHERE wc.is_active = true;

-- ========================================
-- COMENTARIOS Y DOCUMENTACI√ìN
-- ========================================
COMMENT ON TABLE whatsapp_configs IS 'Configuraciones de WhatsApp Business API por empresa';
COMMENT ON TABLE whatsapp_templates IS 'Plantillas de mensaje pre-aprobadas por empresa';
COMMENT ON TABLE whatsapp_logs IS 'Logs de env√≠o de mensajes por empresa';
COMMENT ON VIEW active_whatsapp_configs IS 'Vista de configuraciones activas de WhatsApp';

-- ========================================
-- INSERCIONES DE EJEMPLO (opcional)
-- ========================================
-- Ejemplo de configuraci√≥n para una empresa
-- INSERT INTO whatsapp_configs (
--   company_id, access_token, phone_number_id, display_phone_number,
--   verified_name, is_active, test_mode, is_default
-- ) VALUES (
--   1, 'EAA...', '123456789', '+56912345678',
--   'Mi Empresa SPA', true, false, true
-- );

-- ========================================
-- POL√çTICAS DE SEGURIDAD (RLS)
-- ========================================
-- Habilitar RLS si no est√° activo
-- ALTER TABLE whatsapp_configs ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE whatsapp_templates ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE whatsapp_logs ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para que los usuarios solo vean sus configuraciones
-- CREATE POLICY "Users can view their own whatsapp configs" ON whatsapp_configs
--   FOR SELECT USING (
--     company_id IN (
--       SELECT id FROM companies WHERE created_by = auth.uid()
--     )
--   );

-- ========================================
-- FIN DEL SCRIPT
-- ========================================