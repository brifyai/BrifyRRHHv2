// Script completo para probar la integraci√≥n de Groq AI en todo el sistema
const groqService = require('./src/services/groqService');
const aiRecommendationsService = require('./src/services/aiRecommendationsService');
const embeddingService = require('./src/services/embeddingService');
const enhancedCommunicationService = require('./src/services/enhancedCommunicationService');

console.log('üöÄ Iniciando prueba completa de integraci√≥n de Groq AI en StaffHub...\n');

// Funci√≥n para probar el servicio de Groq
async function testGroqService() {
  console.log('üìã 1. Probando Groq Service...');
  try {
    // Verificar configuraci√≥n
    console.log('   üîç Verificando configuraci√≥n...');
    const isAvailable = await groqService.isAvailable();
    console.log(`   ‚úÖ Groq disponible: ${isAvailable}`);
    
    if (!isAvailable) {
      console.log('   ‚ö†Ô∏è  Groq no est√° disponible. Verifica la API key.');
      return false;
    }
    
    // Probar generaci√≥n de respuesta
    console.log('   üí¨ Probando generaci√≥n de respuesta...');
    const response = await groqService.generateChatResponse(
      'Responde en una frase: ¬øQu√© es StaffHub?',
      [],
      [],
      'test-user'
    );
    console.log(`   ‚úÖ Respuesta generada: "${response.response.substring(0, 100)}..."`);
    console.log(`   üìä Tokens usados: ${response.tokensUsed}`);
    
    // Probar an√°lisis de sentimiento
    console.log('   üòä Probando an√°lisis de sentimiento...');
    const sentiment = await groqService.analyzeSentiment('Me encanta trabajar en StaffHub, es excelente');
    console.log(`   ‚úÖ Sentimiento: ${sentiment.label} (confianza: ${sentiment.confidence})`);
    
    return true;
  } catch (error) {
    console.error(`   ‚ùå Error en Groq Service: ${error.message}`);
    return false;
  }
}

// Funci√≥n para probar el servicio de recomendaciones IA
async function testAIRecommendations() {
  console.log('\nüìã 2. Probando AI Recommendations Service...');
  try {
    const mockStats = {
      folders: 800,
      documents: 2500,
      tokensUsed: 15000,
      storageUsed: 5000000
    };
    
    console.log('   üß† Probando generaci√≥n de recomendaciones...');
    const recommendations = await aiRecommendationsService.generateDashboardRecommendations(mockStats);
    console.log(`   ‚úÖ Recomendaciones generadas: ${recommendations.recommendations.length}`);
    
    console.log('   üìà Probando predicci√≥n de tendencias...');
    const trends = await aiRecommendationsService.predictTrends(mockStats, '30d');
    console.log(`   ‚úÖ Predicciones generadas: ${trends.predictions.length}`);
    
    return true;
  } catch (error) {
    console.error(`   ‚ùå Error en AI Recommendations: ${error.message}`);
    return false;
  }
}

// Funci√≥n para probar el servicio de embeddings
async function testEmbeddingService() {
  console.log('\nüìã 3. Probando Embedding Service...');
  try {
    console.log('   üîç Probando generaci√≥n de embeddings...');
    const embedding = await embeddingService.generateEmbedding(
      'StaffHub es una plataforma de gesti√≥n de recursos humanos'
    );
    console.log(`   ‚úÖ Embedding generado: ${embedding.length} dimensiones`);
    
    // Probar similitud coseno
    console.log('   üìè Probando similitud coseno...');
    const embedding2 = await embeddingService.generateEmbedding(
      'Sistema de administraci√≥n de personal'
    );
    const similarity = embeddingService.cosineSimilarity(embedding, embedding2);
    console.log(`   ‚úÖ Similitud: ${similarity.toFixed(3)}`);
    
    return true;
  } catch (error) {
    console.error(`   ‚ùå Error en Embedding Service: ${error.message}`);
    return false;
  }
}

// Funci√≥n para probar el servicio de comunicaci√≥n mejorada
async function testEnhancedCommunication() {
  console.log('\nüìã 4. Probando Enhanced Communication Service...');
  try {
    console.log('   üí¨ Probando optimizaci√≥n de mensaje...');
    const optimized = await enhancedCommunicationService.optimizeMessage(
      'El meeting es hoy',
      { channel: 'whatsapp', recipients: ['user1'], engagementPrediction: { score: 0.3 } }
    );
    console.log(`   ‚úÖ Mensaje optimizado: "${optimized.content}"`);
    console.log(`   üîß Optimizaciones aplicadas: ${optimized.applied.join(', ') || 'ninguna'}`);
    
    console.log('   üìä Probando predicci√≥n de engagement...');
    const engagement = await enhancedCommunicationService.engagementPredictor.predict(
      ['user1'], 
      '¬°Buenos d√≠as! Tenemos una reuni√≥n importante hoy a las 3pm.',
      'whatsapp'
    );
    console.log(`   ‚úÖ Engagement predicho: ${engagement.prediction} (score: ${engagement.score})`);
    
    return true;
  } catch (error) {
    console.error(`   ‚ùå Error en Enhanced Communication: ${error.message}`);
    return false;
  }
}

// Funci√≥n para probar integraci√≥n completa
async function testCompleteIntegration() {
  console.log('\nüìã 5. Probando Integraci√≥n Completa...');
  try {
    console.log('   üîÑ Probando flujo completo de IA...');
    
    // 1. Generar embedding para una consulta
    const query = '¬øC√≥mo mejorar la productividad en la empresa?';
    const queryEmbedding = await embeddingService.generateEmbedding(query);
    
    // 2. Generar recomendaciones basadas en estad√≠sticas
    const stats = {
      folders: 800,
      documents: 2500,
      tokensUsed: 15000,
      storageUsed: 5000000
    };
    const recommendations = await aiRecommendationsService.generateDashboardRecommendations(stats);
    
    // 3. Analizar sentimiento de un mensaje
    const sentiment = await groqService.analyzeSentiment(
      'Necesito mejorar la comunicaci√≥n con mi equipo'
    );
    
    // 4. Optimizar mensaje basado en an√°lisis
    const optimized = await enhancedCommunicationService.optimizeMessage(
      'Necesito mejorar la comunicaci√≥n con mi equipo',
      { channel: 'whatsapp', recipients: ['team'], engagementPrediction: { score: 0.4 } }
    );
    
    // 5. Generar respuesta final usando todo el contexto
    const finalResponse = await groqService.generateChatResponse(
      query,
      [{
        content: `Recomendaciones: ${recommendations.recommendations.map(r => r.title).join(', ')}`,
        similarity: 0.8
      }],
      [],
      'integration-test'
    );
    
    console.log('   ‚úÖ Flujo completado exitosamente');
    console.log(`   üìä Tokens totales usados en la prueba: ${finalResponse.tokensUsed}`);
    
    return true;
  } catch (error) {
    console.error(`   ‚ùå Error en integraci√≥n completa: ${error.message}`);
    return false;
  }
}

// Funci√≥n principal
async function runCompleteTest() {
  console.log('üéØ CONFIGURACI√ìN DE GROQ AI EN STAFFHUB');
  console.log('=====================================\n');
  
  const results = {
    groqService: await testGroqService(),
    aiRecommendations: await testAIRecommendations(),
    embeddingService: await testEmbeddingService(),
    enhancedCommunication: await testEnhancedCommunication(),
    completeIntegration: await testCompleteIntegration()
  };
  
  console.log('\nüìä RESULTADOS DE LA PRUEBA');
  console.log('========================');
  
  const passed = Object.values(results).filter(r => r).length;
  const total = Object.keys(results).length;
  
  Object.entries(results).forEach(([service, passed]) => {
    const status = passed ? '‚úÖ PAS√ì' : '‚ùå FALL√ì';
    const serviceName = {
      groqService: 'Groq Service',
      aiRecommendations: 'AI Recommendations',
      embeddingService: 'Embedding Service',
      enhancedCommunication: 'Enhanced Communication',
      completeIntegration: 'Integraci√≥n Completa'
    }[service];
    
    console.log(`${status} ${serviceName}`);
  });
  
  console.log(`\nüéâ RESUMEN: ${passed}/${total} pruebas pasaron`);
  
  if (passed === total) {
    console.log('\nüöÄ ¬°FELICITACIONES! Groq AI est√° completamente integrado en StaffHub');
    console.log('‚úÖ Todos los servicios de IA est√°n usando Groq por defecto');
    console.log('‚úÖ El an√°lisis de tendencias inteligentes utiliza Groq');
    console.log('‚úÖ Todas las funcionalidades de IA usan Groq');
  } else {
    console.log('\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisa la configuraci√≥n de Groq AI.');
  }
  
  console.log('\nüìù NOTAS IMPORTANTES:');
  console.log('‚Ä¢ Aseg√∫rate de haber configurado la API key de Groq en Settings');
  console.log('‚Ä¢ Verifica que el modelo seleccionado sea funcional');
  console.log('‚Ä¢ Los embeddings ahora se generan usando Groq en lugar de Gemini');
  console.log('‚Ä¢ El an√°lisis de sentimiento usa Groq para mayor precisi√≥n');
  console.log('‚Ä¢ Todas las recomendaciones de IA son generadas por Groq');
}

// Ejecutar prueba
runCompleteTest().catch(console.error);